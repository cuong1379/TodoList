{"version":3,"sources":["components/Column/index.js","components/AddNewModal/index.js","components/Task/index.js","App.js","serviceWorker.js","index.js"],"names":["Column","_ref","column","handleAddNewTask","children","react_default","a","createElement","className","get","size","onClick","AddNewModal","props","type","checked","selectedColumn","onChange","handleChangeSelectedColumn","placeholder","value","taskContent","handleChangeTaskContent","handleToggleModal","Task","react_beautiful_dnd_esm","index","draggableId","task","isDragDisabled","isEditing","provided","Object","assign","draggableProps","dragHandleProps","ref","innerRef","defaultValue","handleEdit","handleCancelEdit","react","handleChooseEditTask","handleDeleteTask","App","state","displayModal","editingColumnIndex","editingTaskIndex","editedTaskId","columns","fromJS","id","title","tasks","choosenColumn","arguments","length","undefined","_this","setState","prevState","e","target","handleChangeeditingColumnIndex","trim","toastr","warning","timeOut","_this$state","newTask","uuidv1","content","time","Date","toLocaleString","columnIndex","findIndex","updatedColumn","updateIn","push","localStorage","setItem","JSON","stringify","toJS","taskIndex","window","confirm","remove","success","taskId","_this$state2","setIn","handleSaveDrag","result","source","destination","reason","sourceColumnIndex","droppableId","getIn","destinationColumnIndex","insert","getItem","this","parse","_this2","_this$state3","onDragEnd","map","components_Column","key","droppableProps","style","minHeight","components_Task","components_AddNewModal","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e386ea2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nconst Column = ({ column, handleAddNewTask, children }) => (\r\n    <div className=\"Column\">\r\n        <div className=\"Column__header\">\r\n            <h2 className=\"Column__title\">\r\n                <span className=\"Column__item-count\">{column.get('tasks').size}</span>\r\n                <span className=\"Column__text\">{column.get('title')}</span>\r\n            </h2>\r\n            <p className=\"Column__btn\" onClick={handleAddNewTask(column.get('id'))}>\r\n                <i className=\"fas fa-plus\"></i> New task\r\n            </p>\r\n        </div>\r\n        <div className=\"Column__content\">\r\n            {children}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Column;\r\n","import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nconst AddNewModal = (props) => (\r\n    <div className=\"AddNewModal\">\r\n        <div className=\"AddNewModal__backdrop\"></div>\r\n        <div className=\"AddNewModal__content\">\r\n            <h4 className=\"AddNewModal__title\">\r\n                CREATE NEW TASK\r\n            </h4>\r\n            <div className=\"AddNewModal__task-status\">\r\n                <span className=\"AddNewModal__radio\">\r\n                    <input type=\"radio\"\r\n                        checked={props.selectedColumn === 'td'}\r\n                        onChange={props.handleChangeSelectedColumn('td')} />\r\n                    <span>TODO</span>\r\n                </span>\r\n                <span className=\"AddNewModal__radio\">\r\n                    <input type=\"radio\"\r\n                        checked={props.selectedColumn === 'ip'}\r\n                        onChange={props.handleChangeSelectedColumn('ip')} />\r\n                    <span>IN PROGRESS</span>\r\n                </span>\r\n                <span className=\"AddNewModal__radio\">\r\n                    <input type=\"radio\"\r\n                        checked={props.selectedColumn === 'de'}\r\n                        onChange={props.handleChangeSelectedColumn('de')} />\r\n                    <span>DONE</span>\r\n                </span>\r\n            </div>\r\n            <div className=\"AddNewModal__task\">\r\n                <input className=\"AddNewModal__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your task...\"\r\n                    value={props.taskContent}\r\n                    onChange={props.handleChangeTaskContent} />\r\n            </div>\r\n            <div className=\"AddNewModal__action\">\r\n                <button className=\"AddNewModal__btn AddNewModal__btn--confirm\"\r\n                    onClick={props.handleAddNewTask}\r\n                >\r\n                    Save\r\n                </button>\r\n                <button className=\"AddNewModal__btn AddNewModal__btn--cancel\"\r\n                    onClick={props.handleToggleModal}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default AddNewModal;\r\n","import React, { Fragment } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport './style.scss';\r\n\r\nconst Task = (props) => (\r\n    <Draggable\r\n        index={props.index}\r\n        draggableId={props.task.get('id')}\r\n        isDragDisabled={props.isEditing}\r\n    >\r\n        {\r\n            provided => (\r\n                <div className=\"Task\"\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    {\r\n                        props.isEditing\r\n                            ? <div className=\"Task__editing\">\r\n                                <input type=\"text\"\r\n                                    className=\"Task__editor\"\r\n                                    defaultValue={props.task.get('content')}\r\n                                    onChange={props.handleChangeTaskContent} />\r\n                                <div className=\"Task__editing-action\">\r\n                                    <i className=\"fas fa-check\" onClick={props.handleEdit}></i>\r\n                                    <i className=\"fas fa-ban\" onClick={props.handleCancelEdit}></i>\r\n                                </div>\r\n                                <div className=\"Task__editing-bgr\" onClick={props.handleCancelEdit}></div>\r\n                            </div>\r\n                            : <Fragment>\r\n                                <div className=\"Task__time\">\r\n                                    <i className=\"far fa-calendar-alt\"></i> {props.task.get('time')}\r\n                                </div>\r\n                                <div className=\"Task__main\">\r\n                                    <div className=\"Task__content\">\r\n                                        {props.task.get('content')}\r\n                                    </div>\r\n                                    <div className=\"Task__action\">\r\n                                        <div className=\"Task__btn\" onClick={props.handleChooseEditTask}>\r\n                                            <i className=\"far fa-edit\"></i>\r\n                                        </div>\r\n                                        <div className=\"Task__btn\" onClick={props.handleDeleteTask}>\r\n                                            <i className=\"far fa-trash-alt\"></i>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Fragment>\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n    </Draggable>\r\n)\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css';\r\nimport uuidv1 from 'uuid/v1';\r\nimport { fromJS } from 'immutable'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport './style.scss';\r\nimport Column from './components/Column/';\r\nimport AddNewModal from './components/AddNewModal/';\r\nimport Task from './components/Task/';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        displayModal: false,\r\n        editingColumnIndex: '',\r\n        taskContent: '',\r\n        editingTaskIndex: null,\r\n        editedTaskId: null,\r\n        columns: fromJS([\r\n            { id: 'td', title: 'TO DO', tasks: [] },\r\n            { id: 'ip', title: 'IN PROGRESS', tasks: [] },\r\n            { id: 'de', title: 'DONE', tasks: [] }\r\n        ])\r\n    }\r\n\r\n    componentDidMount() {\r\n        const columns = localStorage.getItem('columns');\r\n        if (columns) {\r\n            this.setState({ columns: fromJS(JSON.parse(columns)) });\r\n        }\r\n    }\r\n\r\n    handleToggleModal = (choosenColumn = '') => () => {\r\n        this.setState(prevState => ({\r\n            displayModal: !prevState.displayModal,\r\n            editingColumnIndex: choosenColumn\r\n        }));\r\n    }\r\n\r\n    handleChangeTaskContent = (e) => this.setState({ taskContent: e.target.value })\r\n\r\n    handleChangeeditingColumnIndex = (editingColumnIndex) => () => this.setState({ editingColumnIndex: editingColumnIndex })\r\n\r\n    handleAddNewTask = () => {\r\n        const { taskContent } = this.state\r\n        if (taskContent.trim() === '') {\r\n            toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\r\n        } else {\r\n            const { editingColumnIndex, columns } = this.state;\r\n            const newTask = fromJS({\r\n                id: uuidv1(),\r\n                content: taskContent,\r\n                time: new Date().toLocaleString()\r\n            });\r\n            const columnIndex = columns.findIndex(column => column.get('id') === editingColumnIndex);\r\n            const updatedColumn = columns.updateIn([columnIndex, 'tasks'], tasks => tasks.push(newTask));\r\n            this.setState({\r\n                displayModal: false,\r\n                editingColumnIndex: '',\r\n                taskContent: '',\r\n                columns: fromJS(updatedColumn)\r\n            }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDeleteTask = (columnIndex, taskIndex) => () => {\r\n        const result = window.confirm('Are your sure to delete this task?');\r\n        if (result) {\r\n            const { columns } = this.state;\r\n            const updatedColumn = columns.updateIn(\r\n                [columnIndex, 'tasks'],\r\n                tasks => tasks.remove(taskIndex));\r\n            this.setState({ columns: fromJS(updatedColumn) }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n                toastr.success('Delete task success', 'Notice', { timeOut: 2000 });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChooseEditTask = (columnIndex, taskIndex, taskId) => () => {\r\n        this.setState({\r\n            editingColumnIndex: columnIndex,\r\n            editingTaskIndex: taskIndex,\r\n            editedTaskId: taskId\r\n        })\r\n    }\r\n\r\n    handleChangeSelectedColumn = (selectedColumn) => () => {\r\n        this.setState({ selectedColumn: selectedColumn })\r\n    }\r\n\r\n    handleEdit = () => {\r\n        const { columns, editingColumnIndex, taskContent, editingTaskIndex } = this.state;\r\n        const updatedColumn = columns.updateIn(\r\n            [editingColumnIndex, 'tasks'],\r\n            tasks => tasks.setIn([editingTaskIndex, 'content'], taskContent)\r\n        );\r\n        this.setState({\r\n            editingColumnIndex: '',\r\n            taskContent: '',\r\n            editedTaskId: null,\r\n            editingTaskIndex: null,\r\n            columns: fromJS(updatedColumn)\r\n        }, () => {\r\n            localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n        });\r\n    }\r\n\r\n    handleCancelEdit = () => {\r\n        this.setState({\r\n            editingColumnIndex: '',\r\n            taskContent: '',\r\n            editedTaskId: null,\r\n            editingTaskIndex: null\r\n        });\r\n    }\r\n\r\n    handleSaveDrag = (result) => {\r\n        const { source, destination, reason } = result;\r\n        if (reason === 'DROP' && destination) {\r\n            const { columns } = this.state;\r\n            const sourceColumnIndex = columns.findIndex(column => column.get('id') === source.droppableId);\r\n            const task = columns.getIn([sourceColumnIndex, 'tasks', source.index]);\r\n            let updatedColumn = columns.updateIn(\r\n                [sourceColumnIndex, 'tasks'],\r\n                tasks => tasks.remove(source.index)\r\n            );\r\n            const destinationColumnIndex = columns.findIndex(column => column.get('id') === destination.droppableId);\r\n            updatedColumn = updatedColumn.updateIn(\r\n                [destinationColumnIndex, 'tasks'],\r\n                tasks => tasks.insert(destination.index, task)\r\n            );\r\n            this.setState({\r\n                columns: fromJS(updatedColumn)\r\n            }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { columns, displayModal, editingColumnIndex, taskContent, editedTaskId } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1 className=\"App__title\">TO DO LIST</h1>\r\n                <DragDropContext onDragEnd={this.handleSaveDrag}>\r\n                    <div className=\"App__content\">\r\n                        {\r\n                            columns.map((column, columnIndex) => (\r\n                                <Column key={column.get('id')}\r\n                                    column={column}\r\n                                    handleAddNewTask={this.handleToggleModal}\r\n                                >\r\n                                    <Droppable droppableId={column.get('id')}>\r\n                                        {\r\n                                            provided => (\r\n                                                <div ref={provided.innerRef}\r\n                                                    {...provided.droppableProps}\r\n                                                    style={{ minHeight: '300px' }}\r\n                                                >\r\n                                                    {\r\n                                                        column.get('tasks').map((task, taskIndex) => (\r\n                                                            <Task key={task.get('id')}\r\n                                                                index={taskIndex}\r\n                                                                isEditing={task.get('id') === editedTaskId}\r\n                                                                handleChangeTaskContent={this.handleChangeTaskContent}\r\n                                                                task={task}\r\n                                                                handleEdit={this.handleEdit}\r\n                                                                handleCancelEdit={this.handleCancelEdit}\r\n                                                                handleChooseEditTask={this.handleChooseEditTask(columnIndex, taskIndex, task.get('id'))}\r\n                                                                handleDeleteTask={this.handleDeleteTask(columnIndex, taskIndex)} />\r\n                                                        ))\r\n                                                    }\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    </Droppable>\r\n                                </Column>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </DragDropContext>\r\n                {\r\n                    displayModal &&\r\n                    <AddNewModal editingColumnIndex={editingColumnIndex}\r\n                        taskContent={taskContent}\r\n                        handleChangeTaskContent={this.handleChangeTaskContent}\r\n                        handleChangeeditingColumnIndex={this.handleChangeeditingColumnIndex}\r\n                        handleAddNewTask={this.handleAddNewTask}\r\n                        handleToggleModal={this.handleToggleModal()}\r\n                        selectedColumn={this.state.selectedColumn}\r\n                        handleChangeSelectedColumn={this.handleChangeSelectedColumn} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}